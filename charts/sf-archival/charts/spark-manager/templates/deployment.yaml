apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "spark-manager.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "spark-manager.labels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "spark-manager.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "spark-manager.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        release: {{ .Release.Name }}
        {{ .Values.global.snappyflowProjectLabel}}: {{ .Values.global.snappyflowProjectName }}
        {{ .Values.global.snappyflowAppLabel }}: {{ .Values.global.snappyflowAppName }}
    spec:
      priorityClassName: {{ .Release.Name }}-priority-class
    {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if or (and (eq .Values.global.secrets.aws.enable true) (eq .Values.global.secrets.aws.use_iam_role true)) (and (eq .Values.global.secrets.gcs.enable true) (eq .Values.global.secrets.gcs.use_google_service_account true)) (eq .Values.global.secrets.azure.enable true) }}
      serviceAccountName: {{ .Release.Name }}-service-account
    {{- end}}
      initContainers:
        - name: kafka-ready
          image: "snappyflowml/kafka-zk-check:alpha"
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - ./kafka-init.sh
            - {{ .Values.global.kafkaBrokers }}
        - name: cb-spark-event
          envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-cloud-env
          image: "{{ .Values.cbsparkevent.image.repository }}:{{ .Values.cbsparkevent.image.tag }}"
          imagePullPolicy: {{ .Values.cbsparkevent.image.pullPolicy }}
          args:
            - {{ index .Values "jobserver" "sparkProperties" "logDirectory" }}
        - name: db-ready
          image: "bitnami/postgresql:11.5.0-debian-9-r34"
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - "until pg_isready -d postgresql://'{{ .Values.global.postgresql.postgresqlUsername }}':'{{ .Values.global.postgresql.postgresqlPassword }}'@'{{ template "spark-manager.postgresql.fullname" . }}':{{ .Values.global.postgresql.servicePort }}/'{{ .Values.global.postgresql.postgresqlDatabase }}'; do sleep 3; done"
        - name: compaction-infrastructure
          env:
          {{- if (eq .Values.global.secrets.gcs.enable true) }}
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /var/secrets/google/key.json
          {{- end }}
          {{- if (eq .Values.global.secrets.aws.enable true) }}
          {{- if (eq .Values.global.secrets.aws.use_iam_role false) }}
          - name: AWS_ACCESS_KEY_ID
            value: {{ .Values.global.secrets.aws.AWS_ACCESS_KEY_ID }}
          - name: AWS_SECRET_ACCESS_KEY
            value: {{ .Values.global.secrets.aws.AWS_SECRET_ACCESS_KEY }}
          - name: AWS_REGION
            value: {{ .Values.global.secrets.aws.AWS_DEFAULT_REGION }}
          {{- end }}
          {{- end }}
          image: snappyflowml/compaction-infra:3
          imagePullPolicy: IfNotPresent
          volumeMounts:
          - name: config-volume-compaction
            mountPath: /etc/conf
      containers:
        - name: monitor
          image: "{{ .Values.monitor.image.repository }}:{{ .Values.monitor.image.tag }}"
          imagePullPolicy: {{ .Values.monitor.image.pullPolicy }}
          volumeMounts:
          - name: config-volume-monitor
            mountPath: /etc/conf
          envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-cloud-env
{{- if not .Values.global.development }}
          resources: {{- toYaml .Values.monitor.containerResources | nindent 12 }}
{{- end }}
        - name: jobserver
          image: "{{ .Values.jobserver.image.repository }}:{{ .Values.jobserver.image.tag }}"
          imagePullPolicy: {{ .Values.jobserver.image.pullPolicy }}
          volumeMounts:
          - name: config-volume-jobserver
            mountPath: /etc/conf
          envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-cloud-env
{{- if not .Values.global.development }}
          resources: {{- toYaml .Values.jobserver.containerResources | nindent 12 }}
{{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      volumes:
        - name: config-volume-monitor
          configMap:
            name: {{ template "spark-manager.fullname" . }}-monitor
        - name: config-volume-jobserver
          configMap:
            name: {{ template "spark-manager.fullname" . }}-jobserver
        - name: config-volume-compaction
          configMap:
            name: {{ template "spark-manager.fullname" . }}-infrastructure

