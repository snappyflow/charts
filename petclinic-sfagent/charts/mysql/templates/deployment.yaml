apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "mysql.fullname" . }}
  labels:
    app: {{ template "mysql.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    {{ default "snappyflow/appname" .Values.global.sfappname_key }}: {{ default .Release.Name .Values.global.sfappname }}
    {{ default "snappyflow/projectname" .Values.global.sfprojectname_key }}: {{ default .Release.Name .Values.global.sfprojectname }}
    snappyflow/component: mysql
spec:
  selector:
    matchLabels:
      app: {{ template "mysql.fullname" . }}
      release: {{ .Release.Name  }}
      service: mysql
      {{ default "snappyflow/appname" .Values.global.sfappname_key }}: {{ default .Release.Name .Values.global.sfappname }}
      {{ default "snappyflow/projectname" .Values.global.sfprojectname_key }}: {{ default .Release.Name .Values.global.sfprojectname }}
      snappyflow/component: mysql
  template:
    metadata:
      labels:
        app: {{ template "mysql.fullname" . }}
        release: {{ .Release.Name  }}
        service: mysql
        {{ default "snappyflow/appname" .Values.global.sfappname_key }}: {{ default .Release.Name .Values.global.sfappname }}
        {{ default "snappyflow/projectname" .Values.global.sfprojectname_key }}: {{ default .Release.Name .Values.global.sfprojectname }}
        snappyflow/component: mysql
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: "busybox:1.25.0"
        imagePullPolicy: {{ .Values.imagePullPolicy | quote }}
        command:
        - "sh"
        - "-c"
        - "rm -rf /var/lib/mysql/lost+found && mkdir -p /var/log/mysql && chmod 777 /var/log/mysql"
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: mysql-config-file
          mountPath: /etc/mysql/conf.d
        - name: data
          mountPath: /var/lib/mysql
          {{- if .Values.persistence.subPath }}
          subPath: {{ .Values.persistence.subPath }}
          {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}          
      containers:
      - name: {{ template "mysql.fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ .Values.imagePullPolicy | quote }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        {{- if .Values.mysqlAllowEmptyPassword }}
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "true"
        {{- else }}
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mysql.fullname" . }}
              key: mysql-root-password
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mysql.fullname" . }}
              key: mysql-password
        {{- end }}
        - name: MYSQL_USER
          value: {{ default "" .Values.mysqlUser | quote }}
        - name: MYSQL_DATABASE
          value: {{ default "" .Values.mysqlDatabase | quote }}
        ports:
        - name: mysql
          containerPort: 3306
        livenessProbe:
          exec:
            command:
            {{- if .Values.mysqlAllowEmptyPassword }}
            - mysqladmin
            - ping
            {{- else }}
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
            {{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          exec:
            command:
            {{- if .Values.mysqlAllowEmptyPassword }}
            - mysqladmin
            - ping
            {{- else }}
            - sh
            - -c
            - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
            {{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: mysql-config-file
          mountPath: /etc/mysql/conf.d
        - name: data
          mountPath: /var/lib/mysql
          {{- if .Values.persistence.subPath }}
          subPath: {{ .Values.persistence.subPath }}
          {{- end }}
        {{- if .Values.configurationFiles }}
        - name: configurations
          mountPath: /etc/mysql/conf.d
        {{- end }}
{{- if .Values.mysql_exporter.enabled }}
      - name: mysql-exporter
        image: "{{ .Values.mysql_exporter.image }}:{{ .Values.mysql_exporter.imageTag }}"
        imagePullPolicy: {{ .Values.mysql_exporter.imagePullPolicy | quote }}
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "mysql.fullname" . }}
              key: mysql-root-password
        command: [ 'sh', '-c', 'DATA_SOURCE_NAME="root:$MYSQL_ROOT_PASSWORD@(localhost:3306)/" /bin/mysqld_exporter' ]
        ports:
        - name: mysql-exporter
          containerPort: 9104
        livenessProbe:
          httpGet:
            path: /metrics
            port: mysql-exporter
          initialDelaySeconds: 60
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /metrics
            port: mysql-exporter
          initialDelaySeconds: 30
          timeoutSeconds: 1
{{- end }}
{{- if .Values.sfagent.enabled }}
      - name: sfagent
        image:  "{{ .Values.sfagent.image }}:{{ .Values.sfagent.imageTag }}"
        imagePullPolicy: {{ .Values.sfagent.imagePullPolicy | quote }}
        command:
        - /app/sfagent
        - -enable-console-log
        env:
        - name: APP_NAME
          value: {{ .Values.global.sfappname }}
        - name: PROJECT_NAME
          value: {{ .Values.global.sfprojectname }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        {{- if .Values.sfagent.enabled }}
        - name: sfagent-config
          mountPath: /opt/sfagent/config.yaml
          subPath: config.yaml
        {{- end }}
{{- end }}
{{- if .Values.logrotate.enabled }}
      - name: logrotate
        image:  "{{ .Values.logrotate.image.repository }}:{{ .Values.logrotate.image.tag }}"
        imagePullPolicy: {{ .Values.logrotate.image.pullPolicy | quote }}
        env:
        {{- range $key, $value := .Values.logrotate.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
        {{- end }}
          - name: LOGS_DIRECTORIES
            value: "/var/log/mysql"
        resources:
{{ toYaml .Values.logrotate.resources | indent 10 }}
        volumeMounts:
          - name: varlog
            mountPath: /var/log
{{- end }}
      volumes:
      - name: varlog
        emptyDir: {}
      - name: mysql-config-file
        configMap:
          name: {{ include "spring.fullname" . }}-mysql-config
      - name: libsystemddir
        hostPath:
          path: /usr/lib64
      {{- if .Values.sfagent.enabled }}
      - name: sfagent-config
        configMap:
          name: {{ template "mysql.fullname" . }}-sfagent-config
      {{- end }}
      {{- if .Values.configurationFiles }}
      - name: configurations
        configMap:
          name: {{ template "mysql.fullname" . }}
      {{- end }}
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "mysql.fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end -}}
